
1. 입력의 최대값이 2^31 - 1, Integer.MAX_VALUE 이므로 B번 반복문을 통해 하나씩 곱해나가는 방법은 시간초과가 난다. (O)
    => A 와 B 가 모두 최대값이 제시된다면, 단순히 A * B 방식은 시간초과가 발생할 것

2. int 타입 사용시 A + 1 조차 오버플로우가 발생할 수 있다. Long 타입을 사용하면 A * A 까지는 안전하게 계산할 수 있지만 세제곱부터는 오버플로우가 발생할 수 있다. (O)
    => 제곱값까지는 int형으로 커버가 가능하지만, 세제곱부터는 long 자료형으로도 커버가 불가능하다.

3. 덧셈 혹은 곱셈을 할 때 중간 과정에서 오버플로우가 날 수 있다면, 마지막 결과값만 C에 대한 나머지를 취하는 것이 아닌, 모든 중간결과 역시 C에 대한 나머지로 변경해 계산해야 한다. (O)
    => (A X B) % C => ((A % C) X (B % C)) % C => 나머지 연산의 분배법칙
    => A를 B번 곱하는 중간마다 C로 나눈 값을 사용할 수 있다.

4. 결과값이 2^63 - 1 이하라면 Java 의 Math.pow 를 사용하여 풀 수 있다. (X)
    => Math.pow 라이브러리는 double 타입으로 값을 return 하며, double 타입은 long 데이터보다 더 큰 값을 담을 수 있기에, 전체 연산에 활용 가능하다.