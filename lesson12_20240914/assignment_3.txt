
1. 나올 수 있는 최대값은 15 32767 32767 입력에 대한 답은 2^30 - 1 이다. (X)
    => 2^15 X 2^15 배열에서 (32767, 32767) 몇 번째로 방문했는지이다.
    => 2^2 X 2^2 배열에서 (4,4) 대한 답은 2^4 이다.
    => 즉, 15 32767 32767 입력에 대한 답은 2^(15+15) 이다.

2. 2차원 배열을 직접 두고 규칙에 맞게 한 칸씩 방문하기에는 메모리와 시간 복잡도 모두 너무크다. (O)
    => 최대 입력에 대한 답이 2^30 이기에, 시간과 공간 복잡도 둘 다 너무 크다.

3. 2^N = M 이라고 할떄, (r, c) 에 적혀있는 숫자는 r * M + c 이다. (X)
    => 이것이 맞다면, N = 2 일때. M = 4, r = 3, c = 3, 라면 (r, c) 에 적힌 수는 3 * 4 + 3 = 15
    => 예시에 넣어보니 맞게 떨어진다!
    => 그러나 이 공식은 2^N X 2^N 배열의 마지막값만 구하는 공식으로 추측됨, 나머지 (r, c) 배열의 값은 맞지 않는다.

4. N = 3, r = 2, c = 6 같이 찾아가야 하는 칸이 최소 64칸에 대한 4등분 기준으로 우상단이라면,
  좌상단의 2^4 칸을 방문하지 않아도 (0, 5) 의 방문순서인 16부터 답을 계산해볼 수 있다. (O)
    => 8 * 8 배열에서 (2,6) 의 방문순서를 찾아야됨
    => (3,3) 의 값이, 위에 알수없는 공식을 통해 알 수 있었기에 (0,5) 부터 답을 계산해볼 수 있다.

