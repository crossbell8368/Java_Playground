
1. 주어진 입력이 9자리 이하라면, 그 길이가 그대로 N이 된다. (X)
    => 만약 주어진 입력이 8자리라고 가정
    => 그 길이가 그대로 N이라면, 순열은 1부터 8까지의 수로 이뤄졌다고 보여짐
    => 그러나 주어진 입력에 9가 포함될 수 있음

2. 주어진 입력이 11자리 이상이라면 2 X (N - 9) + 9 값은 입력의 길이를 만족하는 N값이 된다. (?)
    => 주어진 입력이 11이라고 가정
    => 2 X (11-9) + 9 => 2 X 2 + 9 = 13
    => 주어진 입력이 11이라면 이를 만족시키는 N은 13..?
    => 어떤 근거로 이게 13인지..?

3. 순열은 1부터 N까지의 수만 포함하므로, 포함된 모든 수는 0으로 시작하지 않는다. (O)
    따라서 예제 입력 1에서 6번째 숫자 0의 앞(41111 ^ 09876532)에는 공백이 있을 수 없다.
    => 0이 아닌 1부터 시작하는 순열이기에 0앞에 공백은 불가능하다.

 4. 주어지는 입력의 길이가 충분히 짧을 것이므로 별도의 처리 없이 어디를 공백으로 할 지 결정하는 모든 경우의 수를 구해
   각 경우가 1~N이 한 번씩만 등장하는지 확인하는 것으로도 시간 내에 풀 수 있다. (X)
   => 어디를 공백을 결정하는지 모든 경우의 수를 구할때 최악의 경우는
   => 최대 50개의 수로 이뤄져있으며, 각 수들 앞에 공백이 존재
   => 이렇게 구성된 순열의 경우의 수는 50!
   => 50! 이라는 수를 직접 일일이 연산하는 것은 시간복잡도를 초과할 것

5. 복구한 수열의 경우가 여러 가지일 경우, 그 중 하나를 출력하라고 되어있지만
   조건을 만족하는 입력은 언제나 하나의 수열로만 복구될 수 있다. (X)
   => 조건1. 1부터 N까지의 수로 이뤄짐
   => 조건2. 순열은 최소 1개, 최대 50개의 수로 이뤄져있음
   => 입력으로는 N도 주어지지 않음...
   => 그렇기에 출력으로 나오는 순열도 항상 달라질 수 있음