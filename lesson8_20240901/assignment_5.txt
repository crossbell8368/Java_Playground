
1. 중요도가 높은 문서가 나중에 요청되었더라도, 앞에 있는 모든 문서보다 중요도가 높다면 해당 문서가 가장 먼저 출력된다. (0)
    => FIFO 방식이 아닌, 중요도 기반의 Queue 이기에 중요도가 높은 문서가 먼저 출력된다

2. 중요도가 같은 문서가 여럿이라면, 그 중 먼저 요청된 문서를 먼저 출력해야 한다. (X)
    => 문제에서 본인보다 중요도가 높은 문서가 없다면 바로 출력을 요청하였음

3. [A:1, B:2, C:3, D:2, E:1] 으로 요청이 들어왔다면, 출력은 C,B,D,A,E 가 된다. (X)
    => B, C, D, E, A
    => C, D, E, A, B -> C
    => D, E, A, B -> D
    => E, A, B
    => A, B, E
    => B, A, E -> B
    => A, E -> A
    => E -> E
    : 출력은 C, D, B, A, E 가 되어야 한다.

4. 찾아야 하는 것은 특정 중요도의 문서가 아닌, M번째로 입력된 문서의 출력 순서이므로, 문서를 Queue에 저장할때 중요도 뿐만 아니라 무엇이 M번째 문서인지 알 수 있는 추가적인 값이 필요하다. (?)
    => 저장할때가 아닌, 출력될때 출력되는 문서가 찾는 문서인지
    => 그리고 그 문서가 현재 몇번째로 출력된 것인지
    => 이것을 찾아야 하는게 아닌가..? 그게 그 말인가..?

5. [A:1, B:2, C:3, D:2, E:1] 으로 요청이 들어왔다면, 문서의 중요도 순서는 3,2,2,1,1 처럼 비오름차순..?(내림차순 아닌가..?) 으로 되어야 올바른 출력 순서이다. (0)
    => 중간에 조정과정을 거치면서 결론으로는 내림차순으로 출력됨을 알 수 있음